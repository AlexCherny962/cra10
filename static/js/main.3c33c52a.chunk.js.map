{"version":3,"sources":["CountBtn.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["CountBtn","props","console","log","updateCounter","value","count","onClick","Counter","useState","setCount","n","style","margin","App","numbersOfCounters","setnumbersOfCounters","counters","i","push","className","align","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wJAEe,SAASA,EAASC,GAK7B,OADJC,QAAQC,IAAI,YAAYF,EAAOA,EAAMG,cAAeH,EAAMI,MAAOJ,EAAMK,OAE/D,4BAAQC,QAJH,WACTN,EAAMG,cAAcH,EAAMI,MAAMJ,EAAMK,SAGVL,EAAMI,OCLvB,SAASG,IAAW,IAAD,EACJC,mBAAS,GADL,mBACvBH,EADuB,KAChBI,EADgB,KAGxBN,EAAgB,SAACO,GACnBD,EAASC,IAEb,OACJ,yBAAKC,MAAO,CAACC,OAAQ,SACjB,kBAACb,EAAD,CAAUK,OAAQ,EAAGC,MAAOA,EAAOF,cAAeA,IAClD,kBAACJ,EAAD,CAAUK,OAAQ,EAAGC,MAAOA,EAAOF,cAAeA,IAClD,kBAACJ,EAAD,CAAUK,OAAQ,EAAGC,MAAOA,EAAOF,cAAeA,IACjDE,EACD,kBAACN,EAAD,CAAUK,MAAO,EAAIC,MAAOA,EAAOF,cAAeA,IAClD,kBAACJ,EAAD,CAAUK,MAAO,EAAIC,MAAOA,EAAOF,cAAeA,IAClD,kBAACJ,EAAD,CAAUK,MAAO,EAAIC,MAAOA,EAAOF,cAAeA,IAClD,6BACA,4BAAQG,QAdS,WAAOG,EAAS,KAcjC,gCCfW,SAASI,IAOpB,IAP2B,IAAD,EAC4BL,mBAAS,GADrC,mBACfM,EADe,KACIC,EADJ,KAMpBC,EAAW,GACRC,EAAE,EAAGA,GAAGH,EAAkBG,IAC/BD,EAASE,KAAK,kBAACX,EAAD,OAEpB,OACI,yBAAKY,UAAU,MAAMC,MAAM,UACtBJ,EAGD,6BACI,4BAAQV,QAdC,WAEfS,EAAqBD,EAAkB,KAYjC,iBCRMO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACf,EAAD,OAEFgB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.3c33c52a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function CountBtn(props){\r\n\r\nconst send = () => {\r\n    props.updateCounter(props.value+props.count) }\r\nconsole.log(\"CountBtn:\",props, props.updateCounter, props.value, props.count) /* для посмотреть*/\r\n    return(\r\n        <button onClick={send}>{props.value}</button>);\r\n}\r\n","import React, {useState} from \"react\";\r\nimport CountBtn from \"./CountBtn\";\r\n\r\nexport default function Counter() {\r\n    const [count, setCount] = useState(1)\r\n    const clearAll = () => {setCount(0);}\r\n    const updateCounter = (n) => {\r\n        setCount(n);\r\n    }\r\n    return (\r\n<div style={{margin: \"32px\"}}>\r\n    <CountBtn value={-3} count={count} updateCounter={updateCounter}/>\r\n    <CountBtn value={-2} count={count} updateCounter={updateCounter}/>\r\n    <CountBtn value={-1} count={count} updateCounter={updateCounter}/>\r\n    {count}\r\n    <CountBtn value={+1} count={count} updateCounter={updateCounter}/>\r\n    <CountBtn value={+2} count={count} updateCounter={updateCounter}/>\r\n    <CountBtn value={+3} count={count} updateCounter={updateCounter}/>\r\n    <div>\r\n    <button onClick={clearAll}>Reset this counter to zero</button>\r\n    </div>\r\n</div>\r\n    )\r\n}","import React, {useCallback, useState} from 'react';\nimport CountBtn from \"./CountBtn\";\nimport Counter from \"./Counter\";\n\nexport default function App() {\n        const [numbersOfCounters, setnumbersOfCounters] = useState(1)\n    const addCounter = () => {\n        // numbersOfCounters=numbersOfCounters+1 !!!! error\n        setnumbersOfCounters(numbersOfCounters+1)\n    }\n    const counters = []\n    for (let i=1; i<=numbersOfCounters;i++) {\n        counters.push(<Counter />)\n    }\n  return (\n      <div className=\"App\" align=\"center\">\n          {counters}\n          {/*{[1,2,3].map(element => <Counter/>)}*/}\n          {/*{[...Array(numbersOfCounters).keys()].map(element => <Counter/>)}*/}\n          <div>\n              <button onClick={addCounter}>Add counter</button>\n          </div>\n      </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}